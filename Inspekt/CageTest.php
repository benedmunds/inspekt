<?php
require_once 'PHPUnit/Framework.php';

require_once 'Cage.php';

/**
 * Test class for Inspekt_Cage.
 * Generated by PHPUnit on 2009-08-10 at 16:30:49.
 */
class Inspekt_CageTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var    Inspekt_Cage
	 * @access protected
	 */
	protected $cage;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp()
	{
		$inputarray['html'] = '<IMG """><SCRIPT>alert("XSS")</SCRIPT>">';
        $inputarray['int']  = 7;
        $inputarray['date'] = '2009-12-25';
        $inputarray['alnum'] = '3a4b5c';
        $inputarray['alpha'] = 'abcdefg';
        $inputarray['zip']   = 55555;
        $inputarray['zip+4'] = '55555-4444';

		$this->cage = Inspekt_Cage::Factory($inputarray);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown()
	{
	}

	/**
	 * @todo Implement testFactory().
	 */
	public function testFactory()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * 
	 */
	public function testGetIterator()
	{
		$this->assertTrue($this->cage->getIterator() instanceof ArrayIterator);
	}

	/**
	 * @todo Implement testOffsetSet().
	 */
	public function testOffsetSet()
	{
		$this->assertFalse($this->cage->getRaw('try_later'));
        $this->cage->offsetSet('try_later', 'it is later');
        $this->assertEquals($this->cage['try_later'], 'it is later');
	}

	/**
	 * exists
	 */
	public function testOffsetExists()
	{
		$this->assertTrue($this->cage->offsetExists('html'));
	}

  	/**
	 * doesn't exist
	 */
	public function testOffsetExists2()
	{
		$this->assertFalse($this->cage->offsetExists('non-existant'));
	}

	/**
	 * @todo Implement testOffsetUnset().
	 */
	public function testOffsetUnset()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testOffsetGet().
	 */
	public function testOffsetGet()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testCount().
	 */
	public function testCount()
	{
		$this->assertSame(7, $this->cage->count());
	}

	/**
	 * @todo Implement testLoadHTMLPurifier().
	 */
	public function testLoadHTMLPurifier()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetHTMLPurifier().
	 */
	public function testGetHTMLPurifier()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testSetHTMLPurifier().
	 */
	public function testSetHTMLPurifier()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Implement test_parseAndApplyAutoFilters().
	 
	public function test_parseAndApplyAutoFilters()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}*/

	/**
	 * Implement test_applyAutoFilters().
	 
	public function test_applyAutoFilters()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}*/

	/**
	 * @todo Implement test__call().
	 */
	public function test__call()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * 
	 */
	public function testAddAccessor()
	{
        //pre-condition, clean start
		$this->assertSame($this->cage->_user_accessors, array());
        $this->cage->addAccessor('method_name');
        $this->assertSame($this->cage->_user_accessors, array('method_name'));
	}

	/**
	 * valid, filtered
	 */
	public function testGetAlpha()
	{
		$this->assertSame('abc', $this->cage->getAlpha('alnum'));
	}

    /**
	 * missing
	 */
	public function testGetAlpha2()
	{
		$this->assertFalse($this->cage->getAlpha('non-existant'));
	}

    /**
	 * invalid, filtered
	 */
	public function testGetAlpha3()
	{
		$this->assertSame('', $this->cage->getAlpha('int'));
	}

    /**
	 * valid, unfiltered
	 */
	public function testGetAlpha4()
	{
		$this->assertSame('abcdefg', $this->cage->getAlpha('alpha'));
	}

	/**
	 * @todo Implement testGetAlnum().
	 */
	public function testGetAlnum()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetDigits().
	 */
	public function testGetDigits()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetDir().
	 */
	public function testGetDir()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * test missing
	 */
	public function testGetInt()
	{
		//non-existent key should return false
		$this->assertFalse($this->cage->getInt('non-existant'));
	}

    /**
	 * test valid
	 */
	public function testGetInt2()
	{
        $this->assertSame($this->cage->getInt('int'), 7);
	}

    /**
     * test filter
     */
    public function testGetInt3()
    {
        $this->assertSame(2009, $this->cage->getInt('date'));
    }
    
	/**
	 * @todo Implement testGetPath().
	 */
	public function testGetPath()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetROT13().
	 */
	public function testGetROT13()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetPurifiedHTML().
	 */
	public function testGetPurifiedHTML()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * 
	 */
	public function testGetRaw()
	{
		$this->assertFalse($this->cage->getRaw('non-existant'));
	}

    /**
	 *
	 */
	public function testGetRaw2()
	{
		//test that found key returns matching value
        $this->assertEquals($this->cage->getRaw('html'),
            '<IMG """><SCRIPT>alert("XSS")</SCRIPT>">');
	}

	/**
	 * test invalid
	 */
	public function testTestAlnum()
	{
		$this->assertFalse($this->cage->testAlnum('html'));
	}

	/**
	 * test valid
	 */
	public function testTestAlnum2()
	{
		$this->assertSame('3a4b5c', $this->cage->testAlnum('alnum'));
	}

	/**
	 * test missing
	 */
	public function testTestAlnum3()
	{
		$this->assertFalse($this->cage->testAlnum('non-existant'));
	}

	/**
	 * test valid
	 */
	public function testTestAlpha()
	{
		$this->assertSame('abcdefg', $this->cage->testAlpha('alpha'));
	}

    /**
	 * test missing
	 */
	public function testTestAlpha2()
	{
		$this->assertFalse($this->cage->testAlpha('non-existant'));
	}
    
    /**
	 * test invalid
	 */
	public function testTestAlpha3()
	{
		$this->assertFalse($this->cage->testAlpha('alnum'));
	}
    
	/**
	 * @todo Implement testTestBetween().
	 */
	public function testTestBetween()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestCcnum().
	 */
	public function testTestCcnum()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestDate().
	 */
	public function testTestDate()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestDigits().
	 */
	public function testTestDigits()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestEmail().
	 */
	public function testTestEmail()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestFloat().
	 */
	public function testTestFloat()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * integer, true
	 */
	public function testTestGreaterThan()
	{
		$this->assertSame(7, $this->cage->testGreaterThan('int', 5));
	}

    /**
	 * non-integer, true
     * @depends testOffsetSet
	 */
	public function testTestGreaterThan2()
	{
        $this->cage['highAlpha'] = 'z';
		$this->assertSame('z', $this->cage->testGreaterThan('highAlpha', 'a'));
	}

    /**
	 * integer, false
	 */
	public function testTestGreaterThan3()
	{
		$this->assertFalse($this->cage->testGreaterThan('int', 9));
	}

    /**
	 * non-integer, false
	 */
	public function testTestGreaterThan4()
	{
		$this->assertFalse($this->cage->testGreaterThan('alpha', 'z'));
	}

    /**
	 * missing
	 */
	public function testTestGreaterThan5()
	{
		$this->assertFalse($this->cage->testGreaterThan('non-existant', 5));
	}

    /**
	 * missing min (bad idea)
	 */
	public function testTestGreaterThan6()
	{
		$this->assertSame(7, $this->cage->testGreaterThan('int'));
	}

	/**
	 * @todo Implement testTestHex().
	 */
	public function testTestHex()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestHostname().
     * @TODO add more tests for hosttype params
	 */
	public function testTestHostname()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestInt() for too high
     * @todo Implement testTestInt() for too low
     * valid
	 */
	public function testTestInt()
	{
		$this->assertSame(7, $this->cage->testInt('int'));
	}

    /**
     * invalid
     */
    public function testTestInt2()
	{
		$this->assertFalse($this->cage->testInt('date'));
	}

    /**
     * missing
     */
    public function testTestInt3()
	{
		$this->assertFalse($this->cage->testInt('non-existant'));
	}

	/**
	 * @todo Implement testTestIp().
	 */
	public function testTestIp()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * integer, true
	 */
	public function testTestLessThan()
	{
		$this->assertSame(7, $this->cage->testLessThan('int', 10));
	}

    /**
	 * non-integer, true
	 */
	public function testTestLessThan2()
	{
		$this->assertSame('abcdefg', $this->cage->testLessThan('alpha', 'z'));
	}

    /**
	 * integer, false
	 */
	public function testTestLessThan3()
	{
		$this->assertFalse($this->cage->testLessThan('int', 2));
	}

    /**
	 * non-integer, false
     * @depends testOffsetSet
	 */
	public function testTestLessThan4()
	{
        $this->cage['highAlpha'] = 'z';
		$this->assertFalse($this->cage->testLessThan('highAlpha', 'a'));
	}

    /**
	 * missing
	 */
	public function testTestLessThan5()
	{
		$this->assertFalse($this->cage->testLessThan('non-existant', 5));
	}

    /**
	 * missing max (bad idea, should alwasy return false?)
	 */
	public function testTestLessThan6()
	{
        $this->assertFalse($this->cage->testLessThan('int'));
	}

	/**
	 * @todo Implement testTestOneOf().
	 */
	public function testTestOneOf()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestPhone().
	 */
	public function testTestPhone()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestRegex().
	 */
	public function testTestRegex()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTestUri().
	 */
	public function testTestUri()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * valid zip
	 */
	public function testTestZip()
	{
		$this->assertSame(55555, $this->cage->testZip('zip'));
	}

    /**
	 * valid zip+4
	 */
	public function testTestZip2()
	{
		$this->assertSame('55555-4444', $this->cage->testZip('zip+4'));
	}

    /**
	 * invalid zip
	 */
	public function testTestZip3()
	{
		$this->assertFalse($this->cage->testZip('date'));
	}

    /**
	 * missing
	 */
	public function testTestZip4()
	{
		$this->assertFalse($this->cage->testZip('non-existant'));
	}

	/**
	 * @todo Implement testNoTags().
	 */
	public function testNoTags()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testNoPath().
	 */
	public function testNoPath()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testNoTagsOrSpecial().
	 */
	public function testNoTagsOrSpecial()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testEscMySQL().
	 */
	public function testEscMySQL()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testEscPgSQL().
	 */
	public function testEscPgSQL()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testEscPgSQLBytea().
	 */
	public function testEscPgSQLBytea()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testKeyExists().
	 */
	public function testKeyExists()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement test_keyExistsRecursive().
	 */
	public function test_keyExistsRecursive()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement test_getValue().
	 */
	public function test_getValue()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement test_getValueRecursive().
	 */
	public function test_getValueRecursive()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement test_setValue().
	 */
	public function test_setValue()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement test_setValueRecursive().
	 */
	public function test_setValueRecursive()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}
}
?>